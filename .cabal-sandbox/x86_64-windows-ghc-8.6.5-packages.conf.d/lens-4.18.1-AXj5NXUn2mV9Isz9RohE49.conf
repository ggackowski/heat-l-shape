name: lens
version: 4.18.1
id: lens-4.18.1-AXj5NXUn2mV9Isz9RohE49
key: lens-4.18.1-AXj5NXUn2mV9Isz9RohE49
license: BSD-2-Clause
copyright: Copyright (C) 2012-2016 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
author: Edward A. Kmett
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <images/Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
abi: d65b65e051ad3adb88c1b9cf0a65af80
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.CTypes
    Control.Lens.Internal.Coerce Control.Lens.Internal.Context
    Control.Lens.Internal.Deque Control.Lens.Internal.Exception
    Control.Lens.Internal.FieldTH Control.Lens.Internal.Fold
    Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
    Control.Lens.Internal.Instances Control.Lens.Internal.Iso
    Control.Lens.Internal.Level Control.Lens.Internal.List
    Control.Lens.Internal.Magma Control.Lens.Internal.Prism
    Control.Lens.Internal.PrismTH Control.Lens.Internal.Review
    Control.Lens.Internal.Setter Control.Lens.Internal.TH
    Control.Lens.Internal.Typeable Control.Lens.Internal.Zoom
    Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
    Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
    Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
    Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
    Control.Lens.Type Control.Lens.Unsound Control.Lens.Wrapped
    Control.Lens.Zoom Control.Monad.Error.Lens
    Control.Parallel.Strategies.Lens Control.Seq.Lens Data.Array.Lens
    Data.Bits.Lens Data.ByteString.Lazy.Lens Data.ByteString.Lens
    Data.ByteString.Strict.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lazy.Lens
    Data.Text.Lens Data.Text.Strict.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Generic.Lens Data.Vector.Lens
    GHC.Generics.Lens Language.Haskell.TH.Lens Numeric.Lens
    Numeric.Natural.Lens System.Exit.Lens System.FilePath.Lens
    System.IO.Error.Lens
hidden-modules: Paths_lens
import-dirs: F:\Git\Heat\.cabal-sandbox\x86_64-windows-ghc-8.6.5\lens-4.18.1-AXj5NXUn2mV9Isz9RohE49
library-dirs: F:\Git\Heat\.cabal-sandbox\x86_64-windows-ghc-8.6.5\lens-4.18.1-AXj5NXUn2mV9Isz9RohE49
              "C:\\Program Files\\Haskell Platform\\8.6.5\\mingw\\lib"
dynamic-library-dirs: F:\Git\Heat\.cabal-sandbox\x86_64-windows-ghc-8.6.5
                      "C:\\Program Files\\Haskell Platform\\8.6.5\\mingw\\lib"
data-dir: F:\Git\Heat\.cabal-sandbox\x86_64-windows-ghc-8.6.5\lens-4.18.1
hs-libraries: HSlens-4.18.1-AXj5NXUn2mV9Isz9RohE49
include-dirs: "C:\\Program Files\\Haskell Platform\\8.6.5\\mingw\\include"
depends:
    array-0.5.3.0 base-4.12.0.0
    base-orphans-0.8.1-HeyTAcy4PKhDcGhjvJwDzq
    bifunctors-5.5.6-EsWHXgGrLOiIG8OIhpGWdQ bytestring-0.10.8.2
    call-stack-0.2.0-Es68HuZP6ItLvN5N7xfBQe
    comonad-5.0.6-70FXRTO2MI01Vjhqw6Q24m containers-0.6.0.1
    contravariant-1.5.2-EcByWFpMv5PIMqVf2KxJah
    distributive-0.6.1-IrfbUmUWPKW9qeWg658hcp
    exceptions-0.10.4-9YTZtPQxEYdL6R7qYx7mFz filepath-1.4.2.1
    free-5.1.3-4NhyAXm9cs3CdnC88mAPPP ghc-prim-0.5.3
    hashable-1.3.0.0-1RsrIcitxVDKffGN1TuMlm
    kan-extensions-5.2-Vq61hLZwj222G1RIvhun4 mtl-2.2.2
    parallel-3.2.2.0-EGl5SOk48TWHAD161C93aQ
    profunctors-5.5.1-GiQSqC2fv9iJU1yoMrYJEl
    reflection-2.1.5-4qtfUoYSp3c7gqYGlkI3YX
    semigroupoids-5.3.4-xmjYDZheUQ4OfJQn8cXGJ
    tagged-0.8.6-AoE7RQX12AwJxLvAxGYxtP template-haskell-2.14.0.0
    text-1.2.3.1 th-abstraction-0.3.1.0-KacyXGqFl6k8QB9PBisbIF
    transformers-0.5.6.2
    transformers-compat-0.6.5-9e4biiR1CNSADVloF4o7Bd
    type-equality-1-5A9N6Ts8RtY5wkf4DqaBDT
    unordered-containers-0.2.10.0-b9YJCQLkMeLUf311RZkQD
    vector-0.12.0.3-FaW0AndQgt0BzgPSs4kvRl
haddock-interfaces: F:\Git\Heat\.cabal-sandbox\doc\x86_64-windows-ghc-8.6.5\lens-4.18.1\html\lens.haddock
haddock-html: F:\Git\Heat\.cabal-sandbox\doc\x86_64-windows-ghc-8.6.5\lens-4.18.1\html
